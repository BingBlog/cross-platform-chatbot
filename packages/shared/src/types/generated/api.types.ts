/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/example/hello': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Hello World endpoint
     * @description A simple example endpoint that returns a greeting message
     */
    get: {
      parameters: {
        query?: {
          /**
           * @description Name to greet
           * @example World
           */
          name?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ApiResponse'] & {
              data?: {
                /** @example Hello, World! */
                message?: string;
                /** Format: date-time */
                timestamp?: string;
              };
            };
          };
        };
        400: components['responses']['BadRequest'];
        500: components['responses']['InternalServerError'];
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/example/echo': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Echo endpoint
     * @description Echoes back the sent data
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /**
             * @description Message to echo back
             * @example Hello from the client!
             */
            message: string;
            /**
             * @description Additional data to echo back
             * @example {
             *       "key": "value"
             *     }
             */
            data?: Record<string, never>;
          };
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ApiResponse'] & {
              data?: {
                /** @description Echoed data */
                echo?: Record<string, never>;
              };
            };
          };
        };
        400: components['responses']['BadRequest'];
        500: components['responses']['InternalServerError'];
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api-docs': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get API documentation
     * @description Returns the OpenAPI specification in JSON format
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OpenAPI specification */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': Record<string, never>;
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    ApiResponse: {
      /** @description Indicates if the request was successful */
      success: boolean;
      /** @description Response message */
      message: string;
      /** @description Response data */
      data?: Record<string, never>;
      /** @description Error message if any */
      error?: string;
      /**
       * Format: date-time
       * @description Response timestamp
       */
      timestamp: string;
    };
    PaginatedResponse: components['schemas']['ApiResponse'] & {
      pagination: {
        page: number;
        limit: number;
        total: number;
        totalPages: number;
        hasNext: boolean;
        hasPrev: boolean;
        nextPage?: number;
        prevPage?: number;
      };
    };
    ValidationError: {
      field: string;
      message: string;
      value?: string;
    };
    ApiError: {
      code: string;
      message: string;
      details?: Record<string, never>;
      statusCode: number;
    };
    /**
     * @description Message role type
     * @enum {string}
     */
    MessageRole: 'USER' | 'ASSISTANT' | 'SYSTEM';
    /**
     * @description Content type
     * @enum {string}
     */
    ContentType: 'TEXT' | 'MARKDOWN' | 'CODE' | 'IMAGE' | 'FILE' | 'JSON';
    User: {
      /** Format: cuid */
      id: string;
      /** Format: email */
      email: string;
      username: string;
      /** Format: uri */
      avatar?: string;
      firstName?: string;
      lastName?: string;
      bio?: string;
      isActive: boolean;
      isEmailVerified: boolean;
      /** Format: date-time */
      emailVerifiedAt?: string;
      /** Format: date-time */
      lastLoginAt?: string;
      loginCount?: number;
      preferences?: Record<string, never>;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    CreateUserRequest: {
      /** Format: email */
      email: string;
      username: string;
      password: string;
      firstName?: string;
      lastName?: string;
    };
    UpdateUserRequest: {
      username?: string;
      firstName?: string;
      lastName?: string;
      bio?: string;
      /** Format: uri */
      avatar?: string;
    };
    UserSettings: {
      /** Format: cuid */
      id: string;
      /** Format: cuid */
      userId: string;
      /** @enum {string} */
      theme: 'light' | 'dark' | 'auto';
      language: string;
      fontSize: number;
      enableNotifications: boolean;
      enableSound: boolean;
      autoSave: boolean;
      defaultAiModel?: string;
      apiSettings?: Record<string, never>;
      uiPreferences?: Record<string, never>;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    UpdateUserSettingsRequest: {
      /** @enum {string} */
      theme?: 'light' | 'dark' | 'auto';
      language?: string;
      fontSize?: number;
      enableNotifications?: boolean;
      enableSound?: boolean;
      autoSave?: boolean;
      defaultAiModel?: string;
      apiSettings?: Record<string, never>;
      uiPreferences?: Record<string, never>;
    };
    LoginRequest: {
      /** Format: email */
      email: string;
      password: string;
    };
    RegisterRequest: {
      /** Format: email */
      email: string;
      username: string;
      password: string;
      firstName?: string;
      lastName?: string;
    };
    LoginResponse: {
      user: components['schemas']['User'];
      token: string;
      refreshToken?: string;
      expiresIn: number;
    };
    RefreshTokenRequest: {
      refreshToken: string;
    };
    ChangePasswordRequest: {
      currentPassword: string;
      newPassword: string;
    };
    ChatSession: {
      /** Format: cuid */
      id: string;
      /** Format: cuid */
      userId: string;
      title: string;
      description?: string;
      messageCount: number;
      /** Format: date-time */
      lastMessageAt?: string;
      isArchived: boolean;
      isFavorite: boolean;
      isPinned: boolean;
      aiModel?: string;
      systemPrompt?: string;
      temperature?: number;
      maxTokens?: number;
      metadata?: Record<string, never>;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    CreateSessionRequest: {
      title: string;
      description?: string;
      aiModel?: string;
      systemPrompt?: string;
      temperature?: number;
      maxTokens?: number;
    };
    UpdateSessionRequest: {
      title?: string;
      description?: string;
      isArchived?: boolean;
      isFavorite?: boolean;
      isPinned?: boolean;
      aiModel?: string;
      systemPrompt?: string;
      temperature?: number;
      maxTokens?: number;
    };
    SessionListQuery: {
      /** @default 1 */
      page: number;
      /** @default 20 */
      limit: number;
      search?: string;
      isArchived?: boolean;
      isFavorite?: boolean;
      isPinned?: boolean;
      /** @enum {string} */
      sortBy?: 'createdAt' | 'updatedAt' | 'lastMessageAt' | 'title';
      /** @enum {string} */
      sortOrder?: 'asc' | 'desc';
    };
    SessionWithMessages: components['schemas']['ChatSession'] & {
      messages?: components['schemas']['Message'][];
      tags?: components['schemas']['SessionTag'][];
    };
    Message: {
      /** Format: cuid */
      id: string;
      /** Format: cuid */
      sessionId: string;
      /** Format: cuid */
      userId: string;
      role: components['schemas']['MessageRole'];
      content: string;
      contentType: components['schemas']['ContentType'];
      /** Format: cuid */
      parentMessageId?: string;
      isEdited: boolean;
      editHistory?: Record<string, never>;
      tokenCount?: number;
      processingTime?: number;
      metadata?: Record<string, never>;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    CreateMessageRequest: {
      content: string;
      contentType?: components['schemas']['ContentType'];
      /** Format: cuid */
      parentMessageId?: string;
      metadata?: Record<string, never>;
    };
    UpdateMessageRequest: {
      content: string;
      metadata?: Record<string, never>;
    };
    MessageListQuery: {
      /** @default 1 */
      page: number;
      /** @default 20 */
      limit: number;
      /** @enum {string} */
      sortBy?: 'createdAt' | 'updatedAt';
      /** @enum {string} */
      sortOrder?: 'asc' | 'desc';
    };
    MessageWithReplies: components['schemas']['Message'] & {
      replies?: components['schemas']['Message'][];
      attachments?: components['schemas']['MessageAttachment'][];
    };
    AIResponse: {
      content: string;
      usage?: {
        promptTokens?: number;
        completionTokens?: number;
        totalTokens?: number;
      };
      model?: string;
      processingTime?: number;
    };
    SendMessageRequest: {
      content: string;
      contentType?: components['schemas']['ContentType'];
      /** Format: cuid */
      parentMessageId?: string;
      /** @default false */
      stream: boolean;
      metadata?: Record<string, never>;
    };
    StreamMessageResponse: {
      id: string;
      content: string;
      isComplete: boolean;
      usage?: {
        promptTokens?: number;
        completionTokens?: number;
        totalTokens?: number;
      };
      model?: string;
      processingTime?: number;
    };
    MessageAttachment: {
      /** Format: cuid */
      id: string;
      /** Format: cuid */
      messageId: string;
      fileName: string;
      fileType: string;
      fileSize: number;
      filePath: string;
      mimeType?: string;
      isProcessed: boolean;
      metadata?: Record<string, never>;
      /** Format: date-time */
      createdAt: string;
    };
    SessionTag: {
      /** Format: cuid */
      id: string;
      /** Format: cuid */
      userId: string;
      /** Format: cuid */
      sessionId: string;
      tagName: string;
      color?: string;
      /** Format: date-time */
      createdAt: string;
    };
    SearchRequest: {
      query: string;
      /** Format: cuid */
      sessionId?: string;
      /** @default 1 */
      page: number;
      /** @default 20 */
      limit: number;
      filters?: {
        dateRange?: {
          /** Format: date-time */
          start?: string;
          /** Format: date-time */
          end?: string;
        };
        contentType?: components['schemas']['ContentType'][];
        role?: components['schemas']['MessageRole'][];
      };
    };
    SearchResult: {
      message: components['schemas']['Message'];
      session: components['schemas']['ChatSession'];
      score: number;
      highlights: string[];
    };
    SearchResponse: {
      results: components['schemas']['SearchResult'][];
      total: number;
      query: string;
      processingTime: number;
    };
    HealthCheckResponse: {
      /** @enum {string} */
      status: 'ok' | 'error';
      /** Format: date-time */
      timestamp: string;
      version: string;
      environment: string;
      services: {
        /** @enum {string} */
        database?: 'connected' | 'disconnected';
        /** @enum {string} */
        redis?: 'connected' | 'disconnected';
        /** @enum {string} */
        ai?: 'available' | 'unavailable';
      };
      uptime: number;
      memory: {
        used?: number;
        total?: number;
        percentage?: number;
      };
    };
  };
  responses: {
    /** @description Bad request - validation error */
    BadRequest: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': components['schemas']['ApiResponse'] & {
          errors?: components['schemas']['ValidationError'][];
        };
      };
    };
    /** @description Unauthorized - authentication required */
    Unauthorized: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': components['schemas']['ApiResponse'];
      };
    };
    /** @description Forbidden - insufficient permissions */
    Forbidden: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': components['schemas']['ApiResponse'];
      };
    };
    /** @description Resource not found */
    NotFound: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': components['schemas']['ApiResponse'];
      };
    };
    /** @description Internal server error */
    InternalServerError: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': components['schemas']['ApiResponse'];
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
